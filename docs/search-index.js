var searchIndex = new Map(JSON.parse('[\
["dropbox_backup_to_external_disk_cli",{"doc":"dropbox_backup_to_external_disk_cli","t":"HCHHHHHHCHHHHHHHHHHHHHHHHHFONNNNNNNNHNNNNONNNSSSSS","n":["all_list","app_state_mod","argument_router","check_and_save_ext_disk_base_path","compare_files","compare_folders","completion","create_folders","crossterm_cli_mod","download_from_list","download_one_file","empty_lists_compared","get_ext_disk_base_path","local_list","main","main_with_catch_errors","move_or_rename_local_files","print_help","read_only_remove","remote_list","spawn_list_local","spawn_list_remote","trash_files","trash_folders","ui_encode_token","ui_test_connection","AppState","app_config","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","init_app_state","into","load_keys_from_io","lock_proba","ref_app_config","string_proba_mutex","try_from","try_into","type_id","BOLD","GREEN","RED","RESET","YELLOW"],"q":[[0,"dropbox_backup_to_external_disk_cli"],[26,"dropbox_backup_to_external_disk_cli::app_state_mod"],[45,"dropbox_backup_to_external_disk_cli::crossterm_cli_mod"],[50,"std::path"],[51,"dropbox_backup_to_external_disk_lib::error_mod"],[52,"core::result"],[53,"std::path"],[54,"std::sync::mpsc"],[55,"core::fmt"],[56,"core::fmt"],[57,"dropbox_backup_to_external_disk_lib::app_state_mod"],[58,"core::any"]],"d":["list local and remote in a multiple threads, then receive …","","look at the arguments and route to appropriate function","check if external disk base path exists and then saves the …","compare files","compare folders","sub-command for bash auto-completion of <code>cargo auto</code> using …","","CLI interface using the crossterm crate","","","empty lists created by compare","read ext_disk_base_path from file …","list in a new thread, then receive messages to print on …","","","","print help","The backup files must not be readonly to allow copying the …","","","","","","Ask the user to paste the token interactively and press …","ui_test_connection","AppState is used as a global variable/struct. AppState …","","","","","","","","Returns the argument unchanged.","","init the global struct APP_STATE defined in the lib project","Calls <code>U::from(self)</code>.","","","","","","","","ansi attribute","ansi color","ansi color","ansi color reset","ansi color"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,0,0,0,0,0],"f":[[1,[[4,[2,3]]]],0,[[],[[4,[2,3]]]],[1,[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],0,[[],[[4,[2,3]]]],[5,[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[6,3]]]],[1,[[4,[2,3]]]],[[],2],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[[8,[[2,[7,7]]]]],[[4,[2,3]]]],[[[8,[[2,[7,7]]]]],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],[[],[[4,[2,3]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[9,-1,[]],[9,-1,[]],[9,2],[[10,11],12],[-1,-1,[]],[[],9],[[],2],[-1,-2,[],[]],[10,[[4,[[2,[7,7]],3]]]],[10,[[13,[7]]]],[10,14],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0],"c":[],"p":[[5,"Path",50],[1,"tuple"],[6,"LibError",51],[6,"Result",52],[1,"str"],[5,"PathBuf",50],[5,"String",53],[5,"Sender",54],[1,"usize"],[5,"AppState",26],[5,"Formatter",55],[8,"Result",55],[5,"MutexGuard",56],[5,"AppConfig",57],[5,"TypeId",58]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
